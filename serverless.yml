service: contactStorageBE

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-2
  environment:
    DYNAMODB_TABLE: ${self:service}-${service:stage, self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/User-index"

functions:
  list:
    handler: resolvers/list.list
    events:
      - http:
          path: list
          method: get
          cors:
            origin: '*'
            headers: 
              - Authorization
          integration: lambda
          authorizer:
            name: CognitoAuth
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  create: 
    handler: resolvers/create.create
    events:
      - http:
          path: create
          method: post
          cors:
            origin: '*'
            headers: '*'
          integration: lambda
          authorizer:
            name: CognitoAuth
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  delete: 
    handler: resolvers/delete.delete
    events:
      - http:
          path: delete/{id}
          method: delete
          cors:
            origin: '*'
            headers: '*'
          integration: lambda
          authorizer:
            name: CognitoAuth
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn
          request:
            parameters:
              paths:
                id: true

resources:
  Resources:
    DynamodbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: User
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
          - AttributeName: User
            KeyType: RANGE

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        UserPoolName: ${self:provider.stage}-user-pool

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        GenerateSecret: false
        UserPoolId:
          Ref: CognitoUserPool
